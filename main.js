/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DendronImporterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultImportFolder: "Imported from Dendron",
  preserveOriginalNames: false,
  createDateFolders: true
};
var DendronImportModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.dendronPath = "";
    this.importFolder = "";
    this.plugin = plugin;
    this.importFolder = plugin.settings.defaultImportFolder;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Import from Dendron Vault" });
    new import_obsidian.Setting(contentEl).setName("Dendron Vault Path").setDesc("Path to your Dendron vault folder (containing .md files)").addText((text) => {
      text.setPlaceholder("/path/to/dendron/vault").setValue(this.dendronPath).onChange(async (value) => {
        this.dendronPath = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Import Destination").setDesc("Folder where imported files will be organized").addText((text) => {
      text.setPlaceholder("Imported Dendron Notes").setValue(this.importFolder).onChange(async (value) => {
        this.importFolder = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Preserve Original Filenames").setDesc("Keep Dendron dot-notation filenames instead of converting to readable names").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.preserveOriginalNames).onChange(async (value) => {
        this.plugin.settings.preserveOriginalNames = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(contentEl).setName("Create Date-based Folders").setDesc("Organize daily journal entries by date").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.createDateFolders).onChange(async (value) => {
        this.plugin.settings.createDateFolders = value;
        await this.plugin.saveSettings();
      });
    });
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    buttonContainer.createEl("button", { text: "Cancel" }).addEventListener("click", () => this.close());
    const importBtn = buttonContainer.createEl("button", { text: "Import", cls: "mod-cta" });
    importBtn.addEventListener("click", async () => {
      if (!this.dendronPath.trim()) {
        new import_obsidian.Notice("Please specify a Dendron vault path");
        return;
      }
      this.close();
      await this.plugin.importFromDendron(this.dendronPath, this.importFolder);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DendronImporterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("download", "Import from Dendron", () => {
      this.showImportModal();
    });
    this.addCommand({
      id: "import-dendron-vault",
      name: "Import from Dendron Vault",
      callback: () => this.showImportModal()
    });
    this.addSettingTab(new DendronImporterSettingTab(this.app, this));
  }
  showImportModal() {
    new DendronImportModal(this.app, this).open();
  }
  async importFromDendron(dendronPath, importFolder) {
    try {
      new import_obsidian.Notice("Starting Dendron import...");
      await this.createDendronFolderStructure(importFolder);
      new import_obsidian.Notice("Dendron folder structure created! Please manually copy your .md files to the appropriate folders.");
    } catch (error) {
      console.error("Import failed:", error);
      new import_obsidian.Notice("Import failed: " + error.message);
    }
  }
  async createDendronFolderStructure(basePath) {
    const structure = [
      `${basePath}/Courses/Doing`,
      `${basePath}/Courses/Done`,
      `${basePath}/Courses/Todo`,
      `${basePath}/Daily`,
      `${basePath}/Projects/Doing`,
      `${basePath}/Projects/Done`,
      `${basePath}/Projects/Ideas`,
      `${basePath}/Web-Resources/Authentication`,
      `${basePath}/Web-Resources/CSS`,
      `${basePath}/Web-Resources/Docker`,
      `${basePath}/Web-Resources/GraphQL`,
      `${basePath}/Web-Resources/NextJS`,
      `${basePath}/Web-Resources/React`,
      `${basePath}/Web-Resources/Testing`,
      `${basePath}/Web-Resources/General`,
      `${basePath}/Guidewire/Education`,
      `${basePath}/Guidewire/Training`,
      `${basePath}/Boilerplates`,
      `${basePath}/Testing`,
      `${basePath}/Technical/Git`,
      `${basePath}/Technical/Database`,
      `${basePath}/Technical/Languages`,
      `${basePath}/Interviews`,
      `${basePath}/Jobs`,
      `${basePath}/References`
    ];
    for (const folderPath of structure) {
      await this.createFolderSafely(folderPath);
    }
    const guideContent = `# Dendron Import Guide

This folder structure has been created to match common Dendron organizational patterns.

## Folder Mapping Guide

### Dendron Pattern \u2192 Obsidian Folder
- \`courses.doing.*\` \u2192 **Courses/Doing/**
- \`courses.done.*\` \u2192 **Courses/Done/**
- \`courses.todo.*\` \u2192 **Courses/Todo/**
- \`daily.journal.*\` \u2192 **Daily/**
- \`pro.doing.*\` \u2192 **Projects/Doing/**
- \`pro.done.*\` \u2192 **Projects/Done/**
- \`pro.ideas.*\` \u2192 **Projects/Ideas/**
- \`web.resources.authentication.*\` \u2192 **Web-Resources/Authentication/**
- \`web.resources.css.*\` \u2192 **Web-Resources/CSS/**
- \`web.resources.docker.*\` \u2192 **Web-Resources/Docker/**
- \`web.resources.graphql.*\` \u2192 **Web-Resources/GraphQL/**
- \`web.resources.nextjs.*\` \u2192 **Web-Resources/NextJS/**
- \`web.resources.react.*\` \u2192 **Web-Resources/React/**
- \`web.resources.testing.*\` \u2192 **Web-Resources/Testing/**
- \`gw.education.*\` \u2192 **Guidewire/Education/**
- \`gw.training.*\` \u2192 **Guidewire/Training/**
- \`boilerplates.*\` \u2192 **Boilerplates/**
- \`testing.*\` \u2192 **Testing/**
- \`git.*\` \u2192 **Technical/Git/**
- \`knex.*\`, \`db.*\` \u2192 **Technical/Database/**
- \`java.*\`, \`python.*\`, \`lan.*\` \u2192 **Technical/Languages/**
- \`interviews.*\` \u2192 **Interviews/**
- \`jobs.*\` \u2192 **Jobs/**
- Other files \u2192 **References/**

## Manual Import Steps

1. **Copy your Dendron .md files** from your Dendron vault
2. **Place them in the appropriate folders** based on the mapping above
3. **Rename files** if desired (remove dot-notation prefixes)
4. **Update internal links** to match new file locations
5. **Delete this guide** when import is complete

## Tips

- Use Obsidian's "Move file to another folder" feature for easy reorganization
- The "Quick Switcher" (Ctrl/Cmd+O) helps find files quickly
- Consider using tags to maintain Dendron-style organization
`;
    await this.app.vault.create(`${basePath}/IMPORT_GUIDE.md`, guideContent);
  }
  async createFolderSafely(folderPath) {
    try {
      const existingFolder = this.app.vault.getAbstractFileByPath(folderPath);
      if (existingFolder instanceof import_obsidian.TFolder) {
        return existingFolder;
      }
      return await this.app.vault.createFolder(folderPath);
    } catch (error) {
      const parts = folderPath.split("/").filter((part) => part.length > 0);
      let currentPath = "";
      for (const part of parts) {
        currentPath = currentPath ? `${currentPath}/${part}` : part;
        try {
          const existing = this.app.vault.getAbstractFileByPath(currentPath);
          if (!(existing instanceof import_obsidian.TFolder) && existing === null) {
            await this.app.vault.createFolder(currentPath);
          }
        } catch (e) {
          console.warn("Could not create folder:", currentPath, e);
        }
      }
      return null;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DendronImporterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Dendron Importer Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Import Folder").setDesc("Default folder name for importing Dendron notes").addText((text) => text.setPlaceholder("Imported from Dendron").setValue(this.plugin.settings.defaultImportFolder).onChange(async (value) => {
      this.plugin.settings.defaultImportFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Preserve Original Filenames").setDesc("Keep Dendron dot-notation filenames instead of converting to readable names").addToggle((toggle) => toggle.setValue(this.plugin.settings.preserveOriginalNames).onChange(async (value) => {
      this.plugin.settings.preserveOriginalNames = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Create Date-based Folders").setDesc("Organize daily journal entries in date-based subfolders").addToggle((toggle) => toggle.setValue(this.plugin.settings.createDateFolders).onChange(async (value) => {
      this.plugin.settings.createDateFolders = value;
      await this.plugin.saveSettings();
    }));
  }
};
